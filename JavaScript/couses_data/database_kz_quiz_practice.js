/**
 * Тесты и практические задания для курса по базам данных на казахском языке
 */

// Глобальная переменная для хранения тестов и практических заданий
window.databaseKzQuizPractice = {};

// Тесты и практические задания для урока 1
const lesson1_quiz_practice = {
  // Практическое задание для урока 1
  practiceTask: `
    <p>Төменде көрсетілген тапсырмаларды орындаңыз:</p>
    <ol>
      <li>Деректер қорының негізгі түрлерін атаңыз және олардың айырмашылықтарын сипаттаңыз</li>
      <li>Реляциялық деректер қорының негізгі компоненттерін атаңыз</li>
      <li>Деректер қорының кестесі үшін мысал жасаңыз (мысалы, "Оқушылар" кестесі), оның бағандарын және деректер түрлерін көрсетіңіз</li>
      <li>Бастапқы кілт (Primary Key) дегеніміз не және ол не үшін қолданылады?</li>
      <li>Деректер қорының схемасын жасаңыз, онда кем дегенде 3 кесте болуы керек, олардың арасындағы байланыстарды көрсетіңіз</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 1
  practiceAnswer: `1. Деректер қорының негізгі түрлері:
- Реляциялық деректер қоры (MySQL, PostgreSQL, Oracle): деректер кестелерде сақталады, SQL тілін қолданады
- NoSQL деректер қоры (MongoDB, Redis): құрылымданбаған деректермен жұмыс істеуге арналған, SQL тілін қолданбайды
- Объектіге бағытталған деректер қоры: деректер объектілер түрінде сақталады
- Иерархиялық деректер қоры: деректер ағаш құрылымында сақталады

2. Реляциялық деректер қорының негізгі компоненттері:
- Кестелер (Tables): деректерді сақтайтын негізгі құрылым
- Бағандар (Columns): кестедегі деректер түрлері
- Жолдар (Rows): кестедегі жеке жазбалар
- Кілттер (Keys): жазбаларды бірегей түрде анықтайтын өрістер
- Индекстер (Indexes): іздеуді жылдамдатуға арналған құрылымдар
- Шектеулер (Constraints): деректердің дұрыстығын қамтамасыз ететін ережелер

3. "Оқушылар" кестесі:
- id (INT): бастапқы кілт
- аты (VARCHAR): оқушының аты
- тегі (VARCHAR): оқушының тегі
- туған_күні (DATE): оқушының туған күні
- сынып_id (INT): оқушының сыныбына сілтеме
- мекен_жайы (TEXT): оқушының мекен-жайы
- телефон (VARCHAR): оқушының телефон нөмірі

4. Бастапқы кілт (Primary Key) - бұл кестедегі әрбір жазбаны бірегей түрде анықтайтын баған немесе бағандар жиынтығы. Ол деректердің бірегейлігін қамтамасыз етеді және басқа кестелерден сілтеме жасау үшін қолданылады.

5. Деректер қорының схемасы:

Оқушылар кестесі:
- id (INT): бастапқы кілт
- аты (VARCHAR)
- тегі (VARCHAR)
- сынып_id (INT): Сыныптар кестесіне сілтеме

Сыныптар кестесі:
- id (INT): бастапқы кілт
- аты (VARCHAR): сыныптың аты
- жетекші_id (INT): Мұғалімдер кестесіне сілтеме

Мұғалімдер кестесі:
- id (INT): бастапқы кілт
- аты (VARCHAR)
- тегі (VARCHAR)
- пән (VARCHAR)`
};

// Тесты и практические задания для урока 2
const lesson2_quiz_practice = {
  // Тест для урока 2
  quizQuestions: [
    {
      text: 'SQL тілінде деректерді алу үшін қандай сұраныс қолданылады?',
      options: [
        'INSERT',
        'UPDATE',
        'SELECT',
        'DELETE'
      ]
    },
    {
      text: 'Кестедегі барлық бағандарды таңдау үшін қандай таңба қолданылады?',
      options: [
        '*',
        '#',
        '+',
        '@'
      ]
    },
    {
      text: 'SQL тілінде жаңа деректер қосу үшін қандай сұраныс қолданылады?',
      options: [
        'SELECT',
        'INSERT',
        'UPDATE',
        'CREATE'
      ]
    },
    {
      text: 'SQL тілінде деректерді өзгерту үшін қандай сұраныс қолданылады?',
      options: [
        'MODIFY',
        'ALTER',
        'CHANGE',
        'UPDATE'
      ]
    },
    {
      text: 'SQL тілінде деректерді жою үшін қандай сұраныс қолданылады?',
      options: [
        'REMOVE',
        'DROP',
        'DELETE',
        'CLEAR'
      ]
    }
  ],
  
  // Ответы на тест для урока 2
  quizAnswers: {
    q1: 'c',
    q2: 'a',
    q3: 'b',
    q4: 'd',
    q5: 'c'
  }
};

// Тесты и практические задания для урока 3
const lesson3_quiz_practice = {
  // Практическое задание для урока 3
  practiceTask: `
    <p>Төменде көрсетілген SQL сұраныстарын жазыңыз:</p>
    <ol>
      <li>Барлық оқушыларды таңдау үшін сұраныс жазыңыз</li>
      <li>10-сыныптағы оқушыларды таңдау үшін WHERE операторын қолданып сұраныс жазыңыз</li>
      <li>Жасы 15-тен үлкен оқушыларды таңдау үшін сұраныс жазыңыз</li>
      <li>Аты "А" әрпінен басталатын және жасы 16-дан үлкен оқушыларды таңдау үшін сұраныс жазыңыз</li>
      <li>10-сыныпта оқитын немесе жасы 15-тен үлкен оқушыларды таңдау үшін сұраныс жазыңыз</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 3
  practiceAnswer: `
SELECT * FROM оқушылар;
SELECT * FROM оқушылар WHERE сынып = 10;
SELECT * FROM оқушылар WHERE жасы > 15;
SELECT * FROM оқушылар WHERE аты LIKE 'А%' AND жасы > 16;
SELECT * FROM оқушылар WHERE сынып = 10 OR жасы > 15;`
};

// Тесты и практические задания для урока 4
const lesson4_quiz_practice = {
  // Тест для урока 4
  quizQuestions: [
    {
      text: 'LIKE операторында % таңбасы нені білдіреді?',
      options: [
        'Бір таңбаға сәйкес келеді',
        'Кез келген таңбалар тізбегіне сәйкес келеді',
        'Сандарға сәйкес келеді',
        'Арнайы таңбаларға сәйкес келеді'
      ]
    },
    {
      text: 'LIKE операторында _ таңбасы нені білдіреді?',
      options: [
        'Кез келген таңбалар тізбегіне сәйкес келеді',
        'Бір таңбаға сәйкес келеді',
        'Бос орынға сәйкес келеді',
        'Сандарға сәйкес келеді'
      ]
    },
    {
      text: '"Аты А әрпінен басталатын оқушыларды табу" үшін қандай сұраныс дұрыс?',
      options: [
        "SELECT * FROM оқушылар WHERE аты LIKE 'А%'",
        "SELECT * FROM оқушылар WHERE аты LIKE '%А'",
        "SELECT * FROM оқушылар WHERE аты LIKE '_А%'",
        "SELECT * FROM оқушылар WHERE аты LIKE 'А'"
      ]
    },
    {
      text: '"Аты А әрпіне аяқталатын оқушыларды табу" үшін қандай сұраныс дұрыс?',
      options: [
        "SELECT * FROM оқушылар WHERE аты LIKE 'А%'",
        "SELECT * FROM оқушылар WHERE аты LIKE '%А'",
        "SELECT * FROM оқушылар WHERE аты LIKE '_А'",
        "SELECT * FROM оқушылар WHERE аты LIKE 'А_'"
      ]
    },
    {
      text: '"Атында А әрпі бар оқушыларды табу" үшін қандай сұраныс дұрыс?',
      options: [
        "SELECT * FROM оқушылар WHERE аты LIKE 'А%'",
        "SELECT * FROM оқушылар WHERE аты LIKE '%А%'",
        "SELECT * FROM оқушылар WHERE аты LIKE '_А_'",
        "SELECT * FROM оқушылар WHERE аты LIKE 'А'"
      ]
    }
  ],
  
  // Ответы на тест для урока 4
  quizAnswers: {
    q1: 'b',
    q2: 'b',
    q3: 'a',
    q4: 'b',
    q5: 'b'
  }
};

// Тесты и практические задания для урока 5
const lesson5_quiz_practice = {
  // Практическое задание для урока 5
  practiceTask: `
    <p>Төменде көрсетілген SQL сұраныстарын жазыңыз:</p>
    <ol>
      <li>"Оқушылар" кестесіне жаңа оқушы қосу үшін INSERT сұранысын жазыңыз (аты, тегі, жасы, сыныбы)</li>
      <li>"Оқушылар" кестесіне бірнеше оқушыны бір сұраныспен қосу үшін INSERT сұранысын жазыңыз</li>
      <li>10-сыныптағы барлық оқушылардың сыныбын 11-сыныпқа өзгерту үшін UPDATE сұранысын жазыңыз</li>
      <li>Белгілі бір оқушының (id = 5) телефон нөмірін өзгерту үшін UPDATE сұранысын жазыңыз</li>
      <li>9-сыныптағы барлық оқушыларды жою үшін DELETE сұранысын жазыңыз</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 5
  practiceAnswer: `INSERT INTO оқушылар (аты, тегі, жасы, сыныбы)
VALUES ('Арман', 'Сериков', 15, '10А');

INSERT INTO оқушылар (аты, тегі, жасы, сыныбы)
VALUES 
  ('Айгерим', 'Кенжебаева', 16, '10Б'),
  ('Болат', 'Асанов', 15, '10А'),
  ('Динара', 'Тулегенова', 16, '10Б');

UPDATE оқушылар
SET сыныбы = '11А'
WHERE сыныбы = '10А';

UPDATE оқушылар
SET телефон = '+77771234567'
WHERE id = 5;

DELETE FROM оқушылар
WHERE сыныбы LIKE '9%';`
};

// Тесты и практические задания для урока 6
const lesson6_quiz_practice = {
  // Тест для урока 6
  quizQuestions: [
    {
      text: 'Екі кестеде де сәйкес келетін жолдарды біріктіру үшін қандай JOIN түрі қолданылады?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ]
    },
    {
      text: 'Сол кестеден барлық жолдарды және оң кестеден сәйкес келетін жолдарды біріктіру үшін қандай JOIN түрі қолданылады?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ]
    },
    {
      text: 'Оң кестеден барлық жолдарды және сол кестеден сәйкес келетін жолдарды біріктіру үшін қандай JOIN түрі қолданылады?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ]
    },
    {
      text: 'Екі кестенің барлық жолдарын біріктіру үшін қандай JOIN түрі қолданылады?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ]
    },
    {
      text: 'JOIN операциясында кестелер арасындағы байланысты көрсету үшін қандай оператор қолданылады?',
      options: [
        'WHERE',
        'ON',
        'HAVING',
        'USING'
      ]
    }
  ],
  
  // Ответы на тест для урока 6
  quizAnswers: {
    q1: 'a',
    q2: 'b',
    q3: 'c',
    q4: 'd',
    q5: 'b'
  }
};

// Тесты и практические задания для урока 7
const lesson7_quiz_practice = {
  // Практическое задание для урока 7
  practiceTask: `
    <p>Төменде көрсетілген SQL сұраныстарын жазыңыз:</p>
    <ol>
      <li>Әр сыныптағы оқушылар санын есептеу үшін GROUP BY операторын қолданып сұраныс жазыңыз</li>
      <li>Жасы 15-тен үлкен оқушылар саны 5-тен көп сыныптарды табу үшін GROUP BY және HAVING операторларын қолданып сұраныс жазыңыз</li>
      <li>Оқушылардың орташа жасын есептеу үшін AVG() функциясын қолданып сұраныс жазыңыз</li>
      <li>Әр сыныптағы ең жас және ең үлкен оқушының жасын табу үшін MIN() және MAX() функцияларын қолданып сұраныс жазыңыз</li>
      <li>Оқушылардың жалпы санын есептеу үшін COUNT() функциясын қолданып сұраныс жазыңыз</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 7
  practiceAnswer: `
SELECT сыныбы, COUNT(*) AS оқушылар_саны
FROM оқушылар
GROUP BY сыныбы;

SELECT сыныбы, COUNT(*) AS оқушылар_саны
FROM оқушылар
WHERE жасы > 15
GROUP BY сыныбы
HAVING COUNT(*) > 5;

SELECT AVG(жасы) AS орташа_жас
FROM оқушылар;

SELECT сыныбы, MIN(жасы) AS ең_жас, MAX(жасы) AS ең_үлкен
FROM оқушылар
GROUP BY сыныбы;

SELECT COUNT(*) AS оқушылар_саны
FROM оқушылар;
`
};

// Тесты и практические задания для урока 8
const lesson8_quiz_practice = {
  // Тест для урока 8
  quizQuestions: [
    {
      text: 'SQL тілінде кестені құру үшін қандай сұраныс қолданылады?',
      options: [
        'CREATE TABLE',
        'MAKE TABLE',
        'NEW TABLE',
        'ADD TABLE'
      ]
    },
    {
      text: 'SQL тілінде кестені жою үшін қандай сұраныс қолданылады?',
      options: [
        'REMOVE TABLE',
        'DELETE TABLE',
        'DROP TABLE',
        'CLEAR TABLE'
      ]
    },
    {
      text: 'SQL тілінде кестенің құрылымын өзгерту үшін қандай сұраныс қолданылады?',
      options: [
        'MODIFY TABLE',
        'CHANGE TABLE',
        'UPDATE TABLE',
        'ALTER TABLE'
      ]
    },
    {
      text: 'SQL тілінде бағанның деректер түрін өзгерту үшін қандай сұраныс қолданылады?',
      options: [
        'ALTER COLUMN',
        'MODIFY COLUMN',
        'CHANGE COLUMN',
        'UPDATE COLUMN'
      ]
    },
    {
      text: 'SQL тілінде кестеге жаңа баған қосу үшін қандай сұраныс қолданылады?',
      options: [
        'ADD COLUMN',
        'INSERT COLUMN',
        'CREATE COLUMN',
        'NEW COLUMN'
      ]
    }
  ],
  
  // Ответы на тест для урока 8
  quizAnswers: {
    q1: 'a',
    q2: 'c',
    q3: 'd',
    q4: 'b',
    q5: 'a'
  }
};

// Тесты и практические задания для урока 9
const lesson9_quiz_practice = {
  // Тест для урока 9 (легкие вопросы)
  quizQuestionsEasy: [
    {
      text: 'Деректер қоры дегеніміз не?',
      options: [
        'Деректерді сақтауға арналған файл',
        'Деректерді сақтау, ұйымдастыру және басқару үшін арналған жүйе',
        'Деректерді өңдеуге арналған бағдарлама',
        'Деректерді көрсетуге арналған интерфейс'
      ]
    },
    {
      text: 'Реляциялық деректер қорының негізгі құрылымдық элементі қандай?',
      options: [
        'Файл',
        'Кесте',
        'Бағдарлама',
        'Интерфейс'
      ]
    },
    {
      text: 'SQL тілінде деректерді алу үшін қандай сұраныс қолданылады?',
      options: [
        'INSERT',
        'UPDATE',
        'SELECT',
        'DELETE'
      ]
    },
    {
      text: 'Бастапқы кілт (Primary Key) дегеніміз не?',
      options: [
        'Кестедегі әрбір жазбаны бірегей түрде анықтайтын баған',
        'Кестедегі барлық бағандардың тізімі',
        'Кестеге кіру үшін қолданылатын құпия сөз',
        'Кестені құру үшін қолданылатын сұраныс'
      ]
    },
    {
      text: 'SQL тілінде WHERE операторы не үшін қолданылады?',
      options: [
        'Деректерді сұрыптау үшін',
        'Деректерді сүзгілеу үшін',
        'Деректерді біріктіру үшін',
        'Деректерді жинақтау үшін'
      ]
    }
  ],
  
  // Тест для урока 9 (средние вопросы)
  quizQuestionsMedium: [
    {
      text: 'JOIN операциясы не үшін қолданылады?',
      options: [
        'Кестені жою үшін',
        'Кестелерді біріктіру үшін',
        'Кестеге деректер қосу үшін',
        'Кестеден деректерді жою үшін'
      ]
    },
    {
      text: 'GROUP BY операторы не үшін қолданылады?',
      options: [
        'Деректерді сұрыптау үшін',
        'Деректерді топтау үшін',
        'Деректерді сүзгілеу үшін',
        'Деректерді біріктіру үшін'
      ]
    },
    {
      text: 'HAVING операторы не үшін қолданылады?',
      options: [
        'Топталған деректерді сүзгілеу үшін',
        'Деректерді сұрыптау үшін',
        'Деректерді біріктіру үшін',
        'Деректерді топтау үшін'
      ]
    },
    {
      text: 'Сыртқы кілт (Foreign Key) дегеніміз не?',
      options: [
        'Кестедегі әрбір жазбаны бірегей түрде анықтайтын баған',
        'Басқа кестедегі бастапқы кілтке сілтеме жасайтын баған',
        'Кестеге кіру үшін қолданылатын құпия сөз',
        'Кестені құру үшін қолданылатын сұраныс'
      ]
    },
    {
      text: 'Индекс (Index) не үшін қолданылады?',
      options: [
        'Деректерді сақтау үшін',
        'Деректерді өңдеу үшін',
        'Деректерді іздеуді жылдамдату үшін',
        'Деректерді көрсету үшін'
      ]
    }
  ],
  
  // Тест для урока 9 (сложные вопросы)
  quizQuestionsHard: [
    {
      text: 'Нормализация дегеніміз не?',
      options: [
        'Деректерді сақтау үшін қолданылатын әдіс',
        'Деректер қорының құрылымын оңтайландыру процесі',
        'Деректерді сұрыптау әдісі',
        'Деректерді біріктіру әдісі'
      ]
    },
    {
      text: 'Транзакция дегеніміз не?',
      options: [
        'Деректер қорындағы бір операция',
        'Бірнеше операциялардың бірыңғай және бөлінбейтін бірлігі',
        'Деректер қорын басқару жүйесі',
        'Деректер қорының құрылымы'
      ]
    },
    {
      text: 'ACID қасиеттері нені білдіреді?',
      options: [
        'Деректер қорының қауіпсіздік қасиеттері',
        'Деректер қорының жылдамдық қасиеттері',
        'Транзакциялардың негізгі қасиеттері (Atomicity, Consistency, Isolation, Durability)',
        'Деректер қорының сақтау қасиеттері'
      ]
    },
    {
      text: 'Деректер қорының триггері дегеніміз не?',
      options: [
        'Деректер қорындағы оқиғаға жауап ретінде автоматты түрде орындалатын код',
        'Деректер қорын басқару жүйесі',
        'Деректер қорының құрылымы',
        'Деректер қорындағы қате'
      ]
    },
    {
      text: 'Деректер қорының көрінісі (View) дегеніміз не?',
      options: [
        'Деректер қорының графикалық интерфейсі',
        'Деректер қорының сақталған сұранысы',
        'Деректер қорының құрылымы',
        'Деректер қорындағы кесте'
      ]
    }
  ],
  
  // Ответы на тесты для урока 9
  quizAnswersEasy: {
    q1: 'b',
    q2: 'b',
    q3: 'c',
    q4: 'a',
    q5: 'b'
  },
  
  quizAnswersMedium: {
    q1: 'b',
    q2: 'b',
    q3: 'a',
    q4: 'b',
    q5: 'c'
  },
  
  quizAnswersHard: {
    q1: 'b',
    q2: 'b',
    q3: 'c',
    q4: 'a',
    q5: 'b'
  },
  
  // Практическое задание для урока 9
  // Практическое задание для урока 9
  practiceTask: `
    <p>Төменде көрсетілген тапсырмаларды орындаңыз. Бұл тапсырма деректер қорымен жұмыс істеу дағдыларын тексереді:</p>
    <ol>
      <li>Оқушылар мен сыныптар үшін деректер қорының схемасын жасаңыз. Келесі кестелерді құру керек:</li>
      <ul>
        <li>"Оқушылар" кестесі (id, аты, тегі, туған_күні, сынып_id)</li>
        <li>"Сыныптар" кестесі (id, аты, жетекші_id)</li>
        <li>"Мұғалімдер" кестесі (id, аты, тегі, пән)</li>
      </ul>
      <li>Жоғарыдағы кестелерді құру үшін SQL сұраныстарын жазыңыз</li>
      <li>Әр кестеге кем дегенде 3 жазба қосу үшін INSERT сұраныстарын жазыңыз</li>
      <li>Оқушылар мен олардың сыныптарын көрсету үшін JOIN операциясын қолданып сұраныс жазыңыз</li>
      <li>Әр сыныптағы оқушылар санын көрсету үшін GROUP BY операциясын қолданып сұраныс жазыңыз</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 9
  practiceAnswer: `
CREATE TABLE Мұғалімдер (
  id INT PRIMARY KEY,
  аты VARCHAR(50),
  тегі VARCHAR(50),
  пән VARCHAR(50)
);

CREATE TABLE Сыныптар (
  id INT PRIMARY KEY,
  аты VARCHAR(10),
  жетекші_id INT,
  FOREIGN KEY (жетекші_id) REFERENCES Мұғалімдер(id)
);

CREATE TABLE Оқушылар (
  id INT PRIMARY KEY,
  аты VARCHAR(50),
  тегі VARCHAR(50),
  туған_күні DATE,
  сынып_id INT,
  FOREIGN KEY (сынып_id) REFERENCES Сыныптар(id)
);

INSERT INTO Мұғалімдер (id, аты, тегі, пән)
VALUES 
  (1, 'Айгүл', 'Сериккызы', 'Математика'),
  (2, 'Болат', 'Асанов', 'Физика'),
  (3, 'Гүлнар', 'Кенжебаева', 'Қазақ тілі');

INSERT INTO Сыныптар (id, аты, жетекші_id)
VALUES 
  (1, '10А', 1),
  (2, '10Б', 2),
  (3, '11А', 3);

INSERT INTO Оқушылар (id, аты, тегі, туған_күні, сынып_id)
VALUES 
  (1, 'Арман', 'Сериков', '2005-05-15', 1),
  (2, 'Бахыт', 'Оспанов', '2005-08-20', 1),
  (3, 'Динара', 'Тулегенова', '2005-03-10', 2),
  (4, 'Ержан', 'Касымов', '2005-11-25', 2),
  (5, 'Жанар', 'Алиева', '2004-07-12', 3),
  (6, 'Зарина', 'Бекова', '2004-09-30', 3);

SELECT о.аты, о.тегі, с.аты AS сынып
FROM Оқушылар о
INNER JOIN Сыныптар с ON о.сынып_id = с.id;

SELECT с.аты AS сынып, COUNT(о.id) AS оқушылар_саны
FROM Сыныптар с
LEFT JOIN Оқушылар о ON с.id = о.сынып_id
GROUP BY с.аты;`
};

// Добавляем все тесты и практические задания в глобальную переменную
window.databaseKzQuizPractice = {
  1: lesson1_quiz_practice,
  2: lesson2_quiz_practice,
  3: lesson3_quiz_practice,
  4: lesson4_quiz_practice,
  5: lesson5_quiz_practice,
  6: lesson6_quiz_practice,
  7: lesson7_quiz_practice,
  8: lesson8_quiz_practice,
  9: lesson9_quiz_practice
};