/**
 * Тесты и практические задания для курса по базам данных на русском языке
 * Структура: в нечетных уроках (1,3,5,7) - только тесты, в четных (2,4,6,8) - только практика
 */

// Тесты для урока 1 (нечетный - только тесты)
const lesson1_quiz_practice = {
  // Тест для урока 1
  quizQuestions: [
    {
      text: 'Что такое база данных?',
      options: [
        'Программа для работы с таблицами',
        'Организованный набор данных, хранящихся и обрабатываемых в вычислительной системе',
        'Система хранения файлов на компьютере',
        'Программа для создания отчетов'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой тип базы данных использует таблицы для хранения данных?',
      options: [
        'Иерархическая база данных',
        'Реляционная база данных',
        'NoSQL база данных',
        'Объектно-ориентированная база данных'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Что такое первичный ключ (Primary Key)?',
      options: [
        'Поле, которое уникально идентифицирует каждую запись в таблице',
        'Первое поле в таблице',
        'Поле, которое связывает две таблицы',
        'Пароль для доступа к базе данных'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой язык используется для работы с реляционными базами данных?',
      options: [
        'HTML',
        'SQL',
        'Python',
        'JavaScript'
      ],
      correctAnswer: 'b'
    }
  ],
  
  // Ответы на тест для урока 1
  quizAnswers: {
    1: 'b',
    2: 'b',
    3: 'a',
    4: 'b'
  },
  
  practiceAnswer: `1. Основные типы баз данных:
- Реляционные базы данных (MySQL, PostgreSQL, Oracle): данные хранятся в таблицах, используют язык SQL
- NoSQL базы данных (MongoDB, Redis): предназначены для работы с неструктурированными данными, не используют SQL
- Объектно-ориентированные базы данных: данные хранятся в виде объектов
- Иерархические базы данных: данные хранятся в древовидной структуре

2. Основные компоненты реляционной базы данных:
- Таблицы (Tables): основная структура для хранения данных
- Столбцы (Columns): типы данных в таблице
- Строки (Rows): отдельные записи в таблице
- Ключи (Keys): поля, уникально идентифицирующие записи
- Индексы (Indexes): структуры для ускорения поиска
- Ограничения (Constraints): правила, обеспечивающие корректность данных

3. Таблица "Ученики":
- id (INT): первичный ключ
- имя (VARCHAR): имя ученика
- фамилия (VARCHAR): фамилия ученика
- дата_рождения (DATE): дата рождения ученика
- класс_id (INT): ссылка на класс ученика
- адрес (TEXT): адрес ученика
- телефон (VARCHAR): номер телефона ученика

4. Первичный ключ (Primary Key) - это столбец или набор столбцов, который уникально идентифицирует каждую запись в таблице. Он обеспечивает уникальность данных и используется для ссылок из других таблиц.

5. Схема базы данных:

Таблица Ученики:
- id (INT): первичный ключ
- имя (VARCHAR): имя ученика
- фамилия (VARCHAR): фамилия ученика
- класс_id (INT): внешний ключ на таблицу Классы

Таблица Классы:
- id (INT): первичный ключ
- название (VARCHAR): название класса (например, "10А")
- классный_руководитель_id (INT): внешний ключ на таблицу Учителя

Таблица Учителя:
- id (INT): первичный ключ
- имя (VARCHAR): имя учителя
- фамилия (VARCHAR): фамилия учителя
- предмет (VARCHAR): преподаваемый предмет`
};

// Практические задания для урока 2 (четный - только практика)
const lesson2_quiz_practice = {
  // Практическое задание для урока 2
  practiceTask: `
    <p>Выполните следующие SQL-запросы:</p>
    <ol>
      <li>Создайте таблицу "Ученики" со следующими полями: id (целое число, первичный ключ), имя (текст), фамилия (текст), возраст (целое число), класс (текст)</li>
      <li>Добавьте в таблицу "Ученики" трех учеников с разными данными</li>
      <li>Создайте таблицу "Классы" с полями: id (целое число, первичный ключ), название (текст), количество_учеников (целое число)</li>
      <li>Добавьте в таблицу "Классы" два класса</li>
      <li>Создайте таблицу "Учителя" с полями: id (целое число, первичный ключ), имя (текст), фамилия (текст), предмет (текст), стаж (целое число)</li>
    </ol>
  `,
  
    // Ответ на практическое задание для урока 2
  practiceAnswer: `CREATE TABLE Ученики (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  возраст INT,
  класс VARCHAR(10)
);

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (1, 'Иван', 'Петров', 15, '9А');

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (2, 'Мария', 'Иванова', 16, '10Б');

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (3, 'Алексей', 'Сидоров', 14, '8В');

CREATE TABLE Классы (
  id INT PRIMARY KEY,
  название VARCHAR(10),
  количество_учеников INT
);

INSERT INTO Классы (id, название, количество_учеников)
VALUES (1, '9А', 25);

INSERT INTO Классы (id, название, количество_учеников)
VALUES (2, '10Б', 23);

CREATE TABLE Учителя (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  предмет VARCHAR(50),
  стаж INT
);`
};

// Тесты для урока 3 (нечетный - только тесты)
const lesson3_quiz_practice = {
  // Тест для урока 3
  quizQuestions: [
    {
      text: 'Какой оператор используется для создания новой таблицы в SQL?',
      options: [
        'CREATE TABLE',
        'NEW TABLE',
        'ADD TABLE',
        'INSERT TABLE'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой тип данных следует использовать для хранения текста переменной длины?',
      options: [
        'INT',
        'VARCHAR',
        'BOOLEAN',
        'FLOAT'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой оператор используется для добавления новой записи в таблицу?',
      options: [
        'ADD',
        'UPDATE',
        'INSERT',
        'CREATE'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для выбора данных из таблицы?',
      options: [
        'GET',
        'SELECT',
        'FIND',
        'SHOW'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой оператор используется для удаления данных из таблицы?',
      options: [
        'REMOVE',
        'DELETE',
        'DROP',
        'CLEAR'
      ],
      correctAnswer: 'b'
    }
    {
      text: 'Какой оператор используется для добавления новой записи в таблицу?',
      options: [
        'ADD',
        'UPDATE',
        'INSERT',
        'CREATE'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какое ключевое слово используется для определения первичного ключа?',
      options: [
        'MAIN KEY',
        'PRIMARY KEY',
        'UNIQUE KEY',
        'FIRST KEY'
      ],
      correctAnswer: 'b'
    }
  ],
  

  
  // Практическое задание для урока 2
  practiceTask: `
    <p>Выполните следующие SQL-запросы:</p>
    <ol>
      <li>Создайте таблицу "Ученики" со следующими полями: id (целое число, первичный ключ), имя (текст), фамилия (текст), возраст (целое число), класс (текст)</li>
      <li>Добавьте в таблицу "Ученики" трех учеников с разными данными</li>
      <li>Создайте таблицу "Классы" с полями: id (целое число, первичный ключ), название (текст), количество_учеников (целое число)</li>
      <li>Добавьте в таблицу "Классы" два класса</li>
      <li>Создайте таблицу "Учителя" с полями: id (целое число, первичный ключ), имя (текст), фамилия (текст), предмет (текст), стаж (целое число)</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 2
  practiceAnswer: `CREATE TABLE Ученики (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  возраст INT,
  класс VARCHAR(10)
);

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (1, 'Иван', 'Петров', 15, '9А');

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (2, 'Мария', 'Иванова', 16, '10Б');

INSERT INTO Ученики (id, имя, фамилия, возраст, класс)
VALUES (3, 'Алексей', 'Сидоров', 14, '8В');

CREATE TABLE Классы (
  id INT PRIMARY KEY,
  название VARCHAR(10),
  количество_учеников INT
);

INSERT INTO Классы (id, название, количество_учеников)
VALUES (1, '9А', 25);

INSERT INTO Классы (id, название, количество_учеников)
VALUES (2, '10Б', 23);

CREATE TABLE Учителя (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  предмет VARCHAR(50),
  стаж INT
);`
};

// Тесты для урока 3 (нечетный - только тесты)
const lesson3_quiz_practice = {
  // Тест для урока 3
  quizQuestions: [
    {
      text: 'Какой оператор используется для выборки данных из таблицы?',
      options: [
        'GET',
        'SELECT',
        'EXTRACT',
        'FIND'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой оператор используется для фильтрации результатов запроса?',
      options: [
        'WHERE',
        'FILTER',
        'HAVING',
        'CONDITION'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой оператор используется для сортировки результатов запроса?',
      options: [
        'SORT',
        'ARRANGE',
        'ORDER BY',
        'GROUP BY'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для объединения условий в запросе?',
      options: [
        'WITH',
        'AND',
        'PLUS',
        'COMBINE'
      ],
      correctAnswer: 'b'
    }
  ]
  practiceAnswer: `SELECT * FROM ученики;
SELECT * FROM ученики WHERE класс = 10;
SELECT * FROM ученики WHERE возраст > 15;
SELECT * FROM ученики WHERE имя LIKE 'А%' AND возраст > 16;
SELECT * FROM ученики WHERE класс = 10 OR возраст > 15;`
};
// Тесты и практические задания для урока 4
const lesson4_quiz_practice = {
  // Тест для урока 4
  quizQuestions: [
    {
      text: 'Какой оператор используется для обновления данных в таблице?',
      options: [
        'MODIFY',
        'CHANGE',
        'UPDATE',
        'ALTER'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для удаления записей из таблицы?',
      options: [
        'REMOVE',
        'DELETE',
        'DROP',
        'ERASE'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какое условие нужно указать, чтобы обновить все записи в таблице?',
      options: [
        'WHERE id > 0',
        'WHERE 1=1',
        'ALL',
        'Не указывать WHERE вообще'
      ],
      correctAnswer: 'd'
    },
    {
      text: 'Какой оператор используется для удаления всей таблицы?',
      options: [
        'DELETE TABLE',
        'REMOVE TABLE',
        'TRUNCATE TABLE',
        'DROP TABLE'
      ],
      correctAnswer: 'd'
    }
  ],
  
  // Ответы на тест для урока 4 (добавлено для исправления отображения тестов)
  quizAnswers: {
    q1: 'c',
    q2: 'b',
    q3: 'd',
    q4: 'd'
  },
  
  // Практическое задание для урока 4
  practiceTask: `
    <p>Выполните следующие SQL-запросы для таблицы "Ученики" (id, имя, фамилия, возраст, класс):</p>
    <ol>
      <li>Напишите запрос для добавления нового ученика в таблицу</li>
      <li>Напишите запрос для обновления класса всех учеников с "10А" на "11А"</li>
      <li>Напишите запрос для добавления номера телефона ученику с id = 5</li>
      <li>Напишите запрос для удаления всех учеников из 9-го класса</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 4
  practiceAnswer: `INSERT INTO ученики (имя, фамилия, возраст, класс)
VALUES ('Айгерим', 'Кенжебаева', 16, '10Б'),
  ('Болат', 'Асанов', 15, '10А'),
  ('Динара', 'Тулегенова', 16, '10Б');

UPDATE ученики
SET класс = '11А'
WHERE класс = '10А';

UPDATE ученики
SET телефон = '+77771234567'
WHERE id = 5;

DELETE FROM ученики
WHERE класс LIKE '9%';`
};

// Тесты и практические задания для урока 5
const lesson5_quiz_practice = {
  // Тест для урока 5
  quizQuestions: [
    {
      text: 'Какая функция используется для подсчета количества записей?',
      options: [
        'SUM()',
        'COUNT()',
        'TOTAL()',
        'NUMBER()'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какая функция используется для нахождения среднего значения?',
      options: [
        'AVERAGE()',
        'MEAN()',
        'AVG()',
        'MID()'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для группировки результатов?',
      options: [
        'GROUP',
        'COLLECT',
        'GROUP BY',
        'ARRANGE BY'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для фильтрации сгруппированных результатов?',
      options: [
        'WHERE',
        'FILTER',
        'HAVING',
        'CONDITION'
      ],
      correctAnswer: 'c'
    }
  ],
  
  // Практическое задание для урока 5
  practiceTask: `
    <p>Выполните следующие SQL-запросы для таблицы "Ученики" (id, имя, фамилия, возраст, класс):</p>
    <ol>
      <li>Напишите запрос для подсчета общего количества учеников</li>
      <li>Напишите запрос для нахождения среднего возраста учеников</li>
      <li>Напишите запрос для подсчета количества учеников в каждом классе</li>
      <li>Напишите запрос для нахождения максимального и минимального возраста учеников</li>
      <li>Напишите запрос для подсчета количества учеников в каждом классе, где количество учеников больше 5</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 5
  practiceAnswer: `SELECT COUNT(*) FROM ученики;

SELECT AVG(возраст) FROM ученики;

SELECT класс, COUNT(*) AS количество
FROM ученики
GROUP BY класс;

SELECT MAX(возраст) AS максимальный_возраст, MIN(возраст) AS минимальный_возраст
FROM ученики;

SELECT класс, COUNT(*) AS количество
FROM ученики
GROUP BY класс
HAVING COUNT(*) > 5;`
};

// Тесты и практические задания для урока 6
const lesson6_quiz_practice = {
  // Тест для урока 6
  quizQuestions: [
    {
      text: 'Какой тип JOIN используется для объединения строк, которые имеют совпадающие значения в обеих таблицах?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой тип JOIN возвращает все строки из левой таблицы и совпадающие строки из правой таблицы?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'CROSS JOIN'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой оператор используется для объединения результатов двух или более запросов?',
      options: [
        'JOIN',
        'UNION',
        'COMBINE',
        'MERGE'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой тип JOIN возвращает все строки из обеих таблиц, даже если нет совпадающих значений?',
      options: [
        'INNER JOIN',
        'LEFT JOIN',
        'RIGHT JOIN',
        'FULL JOIN'
      ],
      correctAnswer: 'd'
    }
  ],
  
  // Ответы на тест для урока 6 (добавлено для исправления отображения тестов)
  quizAnswers: {
    q1: 'a',
    q2: 'b',
    q3: 'b',
    q4: 'd'
  },
  
  // Практическое задание для урока 6
  practiceTask: `
    <p>Выполните следующие SQL-запросы для таблиц "Ученики" и "Классы":</p>
    <ol>
      <li>Напишите запрос с использованием INNER JOIN для получения списка учеников с названиями их классов</li>
      <li>Напишите запрос с использованием LEFT JOIN для получения всех учеников, даже если их класс не найден</li>
      <li>Напишите запрос с использованием RIGHT JOIN для получения всех классов, даже если в них нет учеников</li>
      <li>Напишите запрос с использованием FULL JOIN для получения всех учеников и всех классов</li>
      <li>Напишите запрос для объединения результатов двух запросов: список учеников 10-го класса и список учеников старше 15 лет</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 6
  practiceAnswer: `SELECT у.имя, у.фамилия, к.название
FROM Ученики у
INNER JOIN Классы к ON у.класс_id = к.id;

SELECT у.имя, у.фамилия, к.название
FROM Ученики у
LEFT JOIN Классы к ON у.класс_id = к.id;

SELECT у.имя, у.фамилия, к.название
FROM Ученики у
RIGHT JOIN Классы к ON у.класс_id = к.id;

SELECT у.имя, у.фамилия, к.название
FROM Ученики у
FULL JOIN Классы к ON у.класс_id = к.id;

SELECT имя, фамилия, возраст, класс
FROM Ученики
WHERE класс = '10А'
UNION
SELECT имя, фамилия, возраст, класс
FROM Ученики
WHERE возраст > 15;`
};

// Тесты и практические задания для урока 7
const lesson7_quiz_practice = {
  // Тест для урока 7
  quizQuestions: [
    {
      text: 'Что такое подзапрос (subquery)?',
      options: [
        'Запрос, вложенный в другой запрос',
        'Запрос, выполняемый после основного запроса',
        'Запрос, выполняемый вместо основного запроса',
        'Запрос, выполняемый параллельно с основным запросом'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Где может использоваться подзапрос?',
      options: [
        'Только в операторе SELECT',
        'Только в операторе WHERE',
        'Только в операторе FROM',
        'В операторах SELECT, FROM, WHERE и HAVING'
      ],
      correctAnswer: 'd'
    },
    {
      text: 'Какой оператор используется для проверки наличия значения в результатах подзапроса?',
      options: [
        'CONTAINS',
        'IN',
        'EXIST',
        'WITHIN'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Какой оператор используется для проверки существования результатов подзапроса?',
      options: [
        'EXISTS',
        'PRESENT',
        'AVAILABLE',
        'FOUND'
      ],
      correctAnswer: 'a'
    }
  ],
  
  // Практическое задание для урока 7
  practiceTask: `
    <p>Выполните следующие SQL-запросы с использованием подзапросов:</p>
    <ol>
      <li>Напишите запрос для получения списка учеников, чей возраст больше среднего возраста всех учеников</li>
      <li>Напишите запрос для получения списка учеников, которые учатся в классах с количеством учеников больше 10</li>
      <li>Напишите запрос для получения списка классов, в которых есть хотя бы один ученик старше 16 лет</li>
      <li>Напишите запрос для получения списка учеников, которые не имеют записей в таблице оценок</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 7
  practiceAnswer: `SELECT имя, фамилия, возраст
FROM Ученики
WHERE возраст > (SELECT AVG(возраст) FROM Ученики);

SELECT у.имя, у.фамилия, у.класс
FROM Ученики у
WHERE у.класс_id IN (
  SELECT к.id
  FROM Классы к
  WHERE (
    SELECT COUNT(*)
    FROM Ученики
    WHERE класс_id = к.id
  ) > 10
);

SELECT название
FROM Классы к
WHERE EXISTS (
  SELECT 1
  FROM Ученики у
  WHERE у.класс_id = к.id AND у.возраст > 16
);

SELECT имя, фамилия
FROM Ученики у
WHERE NOT EXISTS (
  SELECT 1
  FROM Оценки о
  WHERE о.ученик_id = у.id
);`
};

// Тесты и практические задания для урока 8
const lesson8_quiz_practice = {
  // Тест для урока 8 (добавлено для исправления отображения тестов)
  quizQuestions: [
    {
      text: 'Что такое индекс в базе данных?',
      options: [
        'Структура для ускорения поиска данных в таблице',
        'Список всех таблиц в базе данных',
        'Список всех столбцов в таблице',
        'Структура для хранения данных'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой тип индекса гарантирует уникальность значений в столбце?',
      options: [
        'Первичный индекс',
        'Уникальный индекс',
        'Составной индекс',
        'Кластерный индекс'
      ],
      correctAnswer: 'b'
    },
    {
      text: 'Что такое составной индекс?',
      options: [
        'Индекс, созданный для нескольких столбцов',
        'Индекс, созданный для первичного ключа',
        'Индекс, созданный для внешнего ключа',
        'Индекс, созданный для всех столбцов в таблице'
      ],
      correctAnswer: 'a'
    },
    {
      text: 'Какой оператор используется для создания индекса?',
      options: [
        'ADD INDEX',
        'MAKE INDEX',
        'CREATE INDEX',
        'INSERT INDEX'
      ],
      correctAnswer: 'c'
    },
    {
      text: 'Какой оператор используется для удаления индекса?',
      options: [
        'REMOVE INDEX',
        'DELETE INDEX',
        'DROP INDEX',
        'ERASE INDEX'
      ],
      correctAnswer: 'c'
    }
  ],
  
  // Ответы на тест для урока 8 (добавлено для исправления отображения тестов)
  quizAnswers: {
    q1: 'a',
    q2: 'b',
    q3: 'a',
    q4: 'c',
    q5: 'c'
  },
  
  // Практическое задание для урока 8
  practiceTask: `
    <p>Выполните следующие SQL-запросы для работы с индексами:</p>
    <ol>
      <li>Создайте индекс для столбца фамилия в таблице Ученики</li>
      <li>Создайте уникальный индекс для столбца email в таблице Ученики</li>
      <li>Создайте составной индекс для столбцов имя и фамилия в таблице Ученики</li>
      <li>Удалите индекс для столбца фамилия в таблице Ученики</li>
      <li>Напишите запрос для просмотра всех индексов в таблице Ученики</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 8
  practiceAnswer: `CREATE INDEX idx_фамилия ON Ученики(фамилия);

CREATE UNIQUE INDEX idx_email ON Ученики(email);

CREATE INDEX idx_имя_фамилия ON Ученики(имя, фамилия);

DROP INDEX idx_фамилия ON Ученики;

SHOW INDEX FROM Ученики;`
};
const lesson9_quiz_practice = {
  // Тест для урока 9 (легкие вопросы)
  quizQuestionsEasy: [
    {
      text: 'Что такое база данных?',
      options: [
        'Файл для хранения данных',
        'Система для хранения, организации и управления данными',
        'Программа для обработки данных',
        'Интерфейс для отображения данных'
      ]
    },
    {
      text: 'Какой элемент является основной структурной единицей реляционной базы данных?',
      options: [
        'Файл',
        'Таблица',
        'Программа',
        'Интерфейс'
      ]
    },
    {
      text: 'Какой запрос используется для получения данных в SQL?',
      options: [
        'INSERT',
        'UPDATE',
        'SELECT',
        'DELETE'
      ]
    },
    {
      text: 'Что такое первичный ключ (Primary Key)?',
      options: [
        'Столбец, который однозначно идентифицирует каждую запись в таблице',
        'Список всех столбцов в таблице',
        'Пароль для доступа к таблице',
        'Запрос для создания таблицы'
      ]
    },
    {
      text: 'Для чего используется оператор WHERE в SQL?',
      options: [
        'Для сортировки данных',
        'Для фильтрации данных',
        'Для объединения данных',
        'Для агрегации данных'
      ]
    }
  ],
  
  // Тест для урока 9 (средние вопросы)
  quizQuestionsMedium: [
    {
      text: 'Для чего используется операция JOIN?',
      options: [
        'Для удаления таблицы',
        'Для объединения таблиц',
        'Для добавления данных в таблицу',
        'Для удаления данных из таблицы'
      ]
    },
    {
      text: 'Для чего используется оператор GROUP BY?',
      options: [
        'Для сортировки данных',
        'Для группировки данных',
        'Для фильтрации данных',
        'Для объединения данных'
      ]
    },
    {
      text: 'Для чего используется оператор HAVING?',
      options: [
        'Для фильтрации сгруппированных данных',
        'Для сортировки данных',
        'Для объединения данных',
        'Для группировки данных'
      ]
    },
    {
      text: 'Что такое внешний ключ (Foreign Key)?',
      options: [
        'Столбец, который однозначно идентифицирует каждую запись в таблице',
        'Столбец, который ссылается на первичный ключ в другой таблице',
        'Пароль для доступа к таблице',
        'Запрос для создания таблицы'
      ]
    },
    {
      text: 'Для чего используется индекс (Index)?',
      options: [
        'Для хранения данных',
        'Для обработки данных',
        'Для ускорения поиска данных',
        'Для отображения данных'
      ]
    }
  ],
  
  // Тест для урока 9 (сложные вопросы)
  quizQuestionsHard: [
    {
      text: 'Что такое нормализация?',
      options: [
        'Метод хранения данных',
        'Процесс оптимизации структуры базы данных',
        'Метод сортировки данных',
        'Метод объединения данных'
      ]
    },
    {
      text: 'Что такое транзакция?',
      options: [
        'Одна операция в базе данных',
        'Неделимая единица работы, состоящая из нескольких операций',
        'Система управления базой данных',
        'Структура базы данных'
      ]
    },
    {
      text: 'Что означают свойства ACID?',
      options: [
        'Свойства безопасности базы данных',
        'Свойства производительности базы данных',
        'Основные свойства транзакций (Atomicity, Consistency, Isolation, Durability)',
        'Свойства хранения базы данных'
      ]
    },
    {
      text: 'Что такое триггер базы данных?',
      options: [
        'Код, который автоматически выполняется в ответ на событие в базе данных',
        'Система управления базой данных',
        'Структура базы данных',
        'Ошибка в базе данных'
      ]
    },
    {
      text: 'Что такое представление (View) базы данных?',
      options: [
        'Графический интерфейс базы данных',
        'Сохраненный запрос базы данных',
        'Структура базы данных',
        'Таблица в базе данных'
      ]
    }
  ],
  
  // Ответы на тесты для урока 9
  quizAnswersEasy: {
    q1: 'b',
    q2: 'b',
    q3: 'c',
    q4: 'a',
    q5: 'b'
  },
  
  quizAnswersMedium: {
    q1: 'b',
    q2: 'b',
    q3: 'a',
    q4: 'b',
    q5: 'c'
  },
  
  quizAnswersHard: {
    q1: 'b',
    q2: 'b',
    q3: 'c',
    q4: 'a',
    q5: 'b'
  },
  
  // Практическое задание для урока 9
  practiceTask: `
    <p>Выполните следующие задания. Это задание проверяет навыки работы с базой данных:</p>
    <ol>
      <li>Создайте схему базы данных для учеников и классов. Необходимо создать следующие таблицы:</li>
      <ul>
        <li>Таблица "Ученики" (id, имя, фамилия, дата_рождения, класс_id)</li>
        <li>Таблица "Классы" (id, название, руководитель_id)</li>
        <li>Таблица "Учителя" (id, имя, фамилия, предмет)</li>
      </ul>
      <li>Напишите SQL-запросы для создания вышеуказанных таблиц</li>
      <li>Напишите INSERT-запросы для добавления минимум 3 записей в каждую таблицу</li>
      <li>Напишите запрос с использованием операции JOIN для отображения учеников и их классов</li>
      <li>Напишите запрос с использованием операции GROUP BY для отображения количества учеников в каждом классе</li>
    </ol>
  `,
  
  // Ответ на практическое задание для урока 9
  practiceAnswer: `
CREATE TABLE Учителя (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  предмет VARCHAR(50)
);

CREATE TABLE Классы (
  id INT PRIMARY KEY,
  название VARCHAR(10),
  руководитель_id INT,
  FOREIGN KEY (руководитель_id) REFERENCES Учителя(id)
);

CREATE TABLE Ученики (
  id INT PRIMARY KEY,
  имя VARCHAR(50),
  фамилия VARCHAR(50),
  дата_рождения DATE,
  класс_id INT,
  FOREIGN KEY (класс_id) REFERENCES Классы(id)
);

INSERT INTO Учителя (id, имя, фамилия, предмет)
VALUES 
  (1, 'Анна', 'Сергеева', 'Математика'),
  (2, 'Борис', 'Алексеев', 'Физика'),
  (3, 'Галина', 'Кузнецова', 'Русский язык');

INSERT INTO Классы (id, название, руководитель_id)
VALUES 
  (1, '10А', 1),
  (2, '10Б', 2),
  (3, '11А', 3);

INSERT INTO Ученики (id, имя, фамилия, дата_рождения, класс_id)
VALUES 
  (1, 'Алексей', 'Смирнов', '2005-08-20', 1),
  (2, 'Екатерина', 'Иванова', '2005-03-10', 2),
  (3, 'Дмитрий', 'Федоров', '2004-07-12', 3),
  (4, 'Мария', 'Кузнецова', '2004-09-30', 3);

-- Запрос с JOIN для отображения учеников и их классов
SELECT у.имя, у.фамилия, к.название AS класс
FROM Ученики у
JOIN Классы к ON у.класс_id = к.id;

-- Запрос с GROUP BY для подсчета количества учеников в каждом классе
SELECT к.название, COUNT(у.id) AS количество_учеников
FROM Ученики у
JOIN Классы к ON у.класс_id = к.id
GROUP BY к.название;`
};

// Добавляем все тесты и практические задания в глобальную переменную
window.databaseRuQuizPractice = {
  1: lesson1_quiz_practice,
  2: lesson2_quiz_practice,
  3: lesson3_quiz_practice,
  4: lesson4_quiz_practice,
  5: lesson5_quiz_practice,
  6: lesson6_quiz_practice,
  7: lesson7_quiz_practice,
  8: lesson8_quiz_practice,
  9: lesson9_quiz_practice
};
