/**
 * –§–∏–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
 */
(function() {
  "use strict";
  
  console.log('üîß –§–∏–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
  document.addEventListener('click', function(e) {
    // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (e.target.classList.contains('run-code-btn')) {
      console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏');
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏
      const practiceContainer = e.target.closest('.practice-container');
      if (!practiceContainer) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
      const lessonNum = practiceContainer.getAttribute('data-lesson');
      if (!lessonNum) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
      const codeInput = practiceContainer.querySelector('.practice-code, textarea');
      if (!codeInput) return;
      
      const userCode = codeInput.value;
      console.log('–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCode);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      let correctAnswer = '';
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É—Ä—Å–∞
        const courseType = window.location.pathname.includes('rus') ? 
          (window.location.pathname.includes('python') ? 'python_ru' : 
          (window.location.pathname.includes('database') ? 'database_ru' : 'html_css_ru')) : 
          (window.location.pathname.includes('python') ? 'python_kz' : 
          (window.location.pathname.includes('database') ? 'database_kz' : 'html_css_kz'));
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        let quizPracticeData;
        if (courseType === 'python_ru' && window.python_ru_quiz_practice) {
          quizPracticeData = window.python_ru_quiz_practice;
        } else if (courseType === 'python_kz' && window.python_kz_quiz_practice) {
          quizPracticeData = window.python_kz_quiz_practice;
        } else if (courseType === 'database_ru' && window.database_ru_quiz_practice) {
          quizPracticeData = window.database_ru_quiz_practice;
        } else if (courseType === 'database_kz' && window.database_kz_quiz_practice) {
          quizPracticeData = window.database_kz_quiz_practice;
        } else if (courseType === 'html_css_ru' && window.html_css_ru_quiz_practice) {
          quizPracticeData = window.html_css_ru_quiz_practice;
        } else if (courseType === 'html_css_kz' && window.html_css_kz_quiz_practice) {
          quizPracticeData = window.html_css_kz_quiz_practice;
        }
        
        if (quizPracticeData && quizPracticeData['lesson' + lessonNum] && quizPracticeData['lesson' + lessonNum].practiceAnswer) {
          correctAnswer = quizPracticeData['lesson' + lessonNum].practiceAnswer;
          console.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', correctAnswer);
        } else {
          console.warn('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞ ' + lessonNum);
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É:', e);
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      let resultDiv = practiceContainer.querySelector('.practice-result');
      if (!resultDiv) {
        resultDiv = document.createElement('div');
        resultDiv.className = 'practice-result';
        practiceContainer.appendChild(resultDiv);
        console.log('–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏');
      }
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
      const isCorrect = compareCodes(userCode, correctAnswer);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isCorrect);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const lang = window.location.pathname.includes('rus') ? 'ru' : 'kk';
      if (isCorrect) {
        resultDiv.innerHTML = `<p class="success-message">
          ‚úÖ ${lang === 'ru' ? '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ!' : '–ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã“õ —Ç–∞–ø—Å—ã—Ä–º–∞ –¥“±—Ä—ã—Å –æ—Ä—ã–Ω–¥–∞–ª–¥—ã!'}</p>`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const currentCourse = localStorage.getItem('lastOpenedCourse') || 
                             localStorage.getItem('currentCourseType') || 
                             courseType || 'html';
        localStorage.setItem(`${currentCourse}_lesson${lessonNum}_practice`, 'true');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        if (typeof window.updateCompleteButton === 'function') {
          window.updateCompleteButton(lessonNum);
        }
      } else {
        resultDiv.innerHTML = `<p class="error-message">
          ‚ùå ${lang === 'ru' ? '–í –∫–æ–¥–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' : '–ö–æ–¥—Ç–∞ “õ–∞—Ç–µ–ª–µ—Ä –±–∞—Ä. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.'}</p>`;
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
        const currentCourse = localStorage.getItem('lastOpenedCourse') || 
                             localStorage.getItem('currentCourseType') || 
                             courseType || 'html';
        localStorage.removeItem(`${currentCourse}_lesson${lessonNum}_practice`);
      }
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      resultDiv.scrollIntoView({ behavior: 'smooth' });
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–¥–∞
  function compareCodes(userCode, correctCode) {
    if (!userCode || !correctCode) return false;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥.)
    const normalizeCode = (code) => {
      return code.replace(/\s+/g, ' ')
                .trim()
                .toLowerCase();
    };
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–≤—ã—á–µ–∫ –Ω–∞ –æ–¥–∏–Ω
    const normalizedUserCode = normalizeCode(userCode).replace(/['"]/g, '"');
    const normalizedCorrectCode = normalizeCode(correctCode).replace(/['"]/g, '"');
    
    // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    const exactMatch = normalizedUserCode === normalizedCorrectCode;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
    const keywordsMatch = correctCode.match(/\b(if|for|while|def|class|print|import|from)\b/g) || [];
    let keywordsPassed = true;
    
    keywordsMatch.forEach(keyword => {
      if (!userCode.includes(keyword)) {
        keywordsPassed = false;
      }
    });
    
    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å—Ç—Ä–æ–∫–∞–º
    const correctCodeLines = correctCode.split('\n').filter(line => line.trim() !== '');
    let linesMatch = true;
    
    const importantLines = correctCodeLines.filter(line => 
      line.includes('=') || line.includes('print(') || line.includes('return') || 
      line.trim().startsWith('if') || line.trim().startsWith('for')
    );
    
    importantLines.forEach(line => {
      const normalizedLine = normalizeCode(line);
      if (!normalizedUserCode.includes(normalizedLine)) {
        linesMatch = false;
      }
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    return exactMatch || (keywordsPassed && linesMatch);
  }
})();
